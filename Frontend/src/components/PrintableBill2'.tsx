// src/components/PrintableBill2.tsx

import React, { useMemo } from 'react';
import { 
  getBetTypeName, 
  type Order, 
  type BillEntryDetail,
  type BetItem // ‚úÖ ‡∏ô‡∏≥ BetItem ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ type ‡∏Ç‡∏≠‡∏á status
} from '../services/BetService';

// Props Interface (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
interface Props {
  order: Order | null;
  details: BillEntryDetail[] | null;
}

// ‚úÖ 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Interface ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
interface ProcessedItem {
  id: string;
  number: string;
  betTypeAndStyle: string;
  amountBet: number;
  amountReceived: number;
  payoutRate: number;
  statusText: string;
  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Type ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  confirmation: BetItem['status'] | '‡∏£‡∏≠‡∏ú‡∏•'; 
}

const PrintableBill2 = React.forwardRef<HTMLDivElement, Props>(({ order, details }, ref) => {
  
  if (!order || !details) {
    return null;
  }

  // ‚úÖ 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç useMemo ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ status ‡∏à‡∏≤‡∏Å item ‡∏à‡∏£‡∏¥‡∏á
  const processedItems = useMemo(() => {
    const allItems: ProcessedItem[] = [];
    details.forEach((entry, entryIndex) => {
      entry.items.forEach((item, itemIndex) => {
        const isHalfPay = item.price !== item.rate;
        // const received = isHalfPay ? item.price / 2 : item.price;
        //‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏ó‡πÄ‡∏ï‡πá‡∏°
        const received = isHalfPay ? item.price : item.price;
        
        allItems.push({
          id: `${entryIndex}-${itemIndex}`,
          number: item.bet_number,
          betTypeAndStyle: `${getBetTypeName(entry.bet_type)} ${item.bet_style}`,
          amountBet: item.price,
          amountReceived: received,
          payoutRate: item.baht_per,
          statusText: isHalfPay ? '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á' : '‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°',
          // üî•üî• ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å item.status ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á üî•üî•
          // ‡∏ñ‡πâ‡∏≤ status ‡πÄ‡∏õ‡πá‡∏ô null (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ "‡∏£‡∏≠‡∏ú‡∏•"
          confirmation: item.status ?? '‡∏£‡∏≠‡∏ú‡∏•',
        });
      });
    });
    return allItems;
  }, [details]);

  const groupedBets = useMemo(() => {
    return processedItems.reduce((acc, bet) => {
      const getGroupKey = (num: string) => {
        if (num.length === 1) return '‡πÄ‡∏•‡∏Ç‡∏ß‡∏¥‡πà‡∏á';
        if (num.length === 2) return '‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß';
        if (num.length === 3) return '‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß';
        return '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
      };
      const key = getGroupKey(bet.number);
      if (!acc[key]) {
        acc[key] = [];
      }
      acc[key].push(bet);
      return acc;
    }, {} as Record<string, ProcessedItem[]>);
  }, [processedItems]);

  const formatDate = (isoString: string | null) => {
    if (!isoString) return 'N/A';
    return new Date(isoString).toLocaleDateString('th-TH', {
      year: 'numeric', month: 'long', day: 'numeric',
    });
  };

  return (
    <div ref={ref} className="p-2 bg-gray-100 font-sans w-[650px]">
      <div className="bg-blue-600 text-white p-2 rounded-t-md text-sm text-center whitespace-nowrap">
        <span>
          ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏• #{order.billRef} | {order.lottoName} | ‡∏á‡∏ß‡∏î {formatDate(order.bill_lotto_draw)}
        </span>
      </div>
      
      {Object.entries(groupedBets).map(([groupName, betsInGroup]) => (
        <div key={groupName} className="mt-1">
          <div className="bg-blue-600 text-white font-semibold text-center py-1 px-3">
            {groupName}
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white border-x border-b border-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó @ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç</th>
                  <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô</th>
                  <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</th>
                  <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó‡∏•‡∏∞)</th> 
                  {/* <th className="py-2 px-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢</th> */}
                  <th className="py-2 px-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏•‡∏Ç</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {betsInGroup.map((bet) => (
                  <tr key={bet.id} className="text-sm">
                    <td className="py-2 px-3 whitespace-nowrap font-semibold">
                      <span className={`font-bold ${bet.betTypeAndStyle.includes("2") ? "text-blue-600": "text-red-600"}`}>{bet.betTypeAndStyle} @ </span><span className={`font-bold ${bet.betTypeAndStyle.includes("2") ? "text-blue-600": "text-red-600"}`}>{bet.number}</span>
                    </td>
                    <td className="py-2 px-3 text-right">{bet.amountBet.toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>
                    <td className={`py-2 px-3 ${bet.statusText === '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á' ? 'text-center text-red-600' : 'text-right text-black'}`}>{bet.amountReceived.toLocaleString('en-US', { minimumFractionDigits: 2 })} {bet.statusText === '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á' ? "(‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á)": ""}</td>
                    <td className={`py-2 px-3 text-center ${bet.statusText === '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á' ? 'text-red-600' : 'text-black'}`}>‡∏ö‡∏≤‡∏ó‡∏•‡∏∞ {bet.statusText === '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á' ? (bet.payoutRate / 2).toLocaleString('en-US', {maximumFractionDigits: 2, minimumFractionDigits:2}):bet.payoutRate.toLocaleString('en-US')}</td> 
                    {/* <td className={`py-2 px-3 text-center font-bold ${bet.statusText === '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á' ? 'text-red-500' : 'text-green-600'}`}>
                      {bet.statusText}
                    </td> */}
                    {/* ‚úÖ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° Style ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á */}
                    <td className={`py-2 px-3 text-center font-bold ${
                      bet.confirmation === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ? 'text-green-700' :
                      bet.confirmation === '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏•‡∏Ç' ? 'text-red-700' :
                      'text-yellow-600'
                    }`}>
                      {bet.confirmation}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ))}

      <div className="bg-blue-600 text-white p-2 rounded-b-md text-right font-bold mt-1 text-lg">
        ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {order.totalAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‡∏ö‡∏≤‡∏ó
      </div>
    </div>
  );
});

export default PrintableBill2;